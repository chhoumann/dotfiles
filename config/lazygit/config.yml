gui:
  showFileIcons: true
  nerdFontsVersion: "3"
git:
    paging:
        # colorArg: always
        # pager: delta --dark --paging=never -s
        externalDiffCommand: difft --color=always --syntax-highlight=on 
customCommands:
    - key: "<c-r>"
      command: "gh pr create --fill --web"
      context: "global"
      loadingText: "Creating pull request on GitHub"
    # - key: "C"
    #   command: "git cz"
    #   description: "commit with commitizen"
    #   context: "files"
    #   loadingText: "opening commitizen commit tool"
    #   subprocess: true
    - key: "<c-a>" # ctrl + a
      description: "Pick AI commit"
      command: 'echo "{{.Form.Msg}}" > .git/COMMIT_EDITMSG && vim .git/COMMIT_EDITMSG && [ -s .git/COMMIT_EDITMSG ] && git commit -F .git/COMMIT_EDITMSG || echo "Commit message is empty, commit aborted."'
      context: "files"
      subprocess: true
      prompts:
          - type: "menuFromCommand"
            title: "AI Commits"
            key: "Msg"
            command: "bunnai"
            filter: '^(?P<number>\d+)\.\s(?P<message>.+)$'
            valueFormat: "{{ .message }}"
            labelFormat: "{{ .number }}: {{ .message | green }}"
    # retrieved from: https://github.com/jesseduffield/lazygit/wiki/Custom-Commands-Compendium#conventional-commit
    - key: "<c-v>"
      context: "global"
      description: "Create new conventional commit"
      prompts:
        - type: "menu"
          key: "Type"
          title: "Type of change"
          options:
            - name: "build"
              description: "Changes that affect the build system or external dependencies"
              value: "build"
            - name: "feat"
              description: "A new feature"
              value: "feat"
            - name: "fix"
              description: "A bug fix"
              value: "fix"
            - name: "chore"
              description: "Other changes that don't modify src or test files"
              value: "chore"
            - name: "ci"
              description: "Changes to CI configuration files and scripts"
              value: "ci"
            - name: "docs"
              description: "Documentation only changes"
              value: "docs"
            - name: "perf"
              description: "A code change that improves performance"
              value: "perf"
            - name: "refactor"
              description: "A code change that neither fixes a bug nor adds a feature"
              value: "refactor"
            - name: "revert"
              description: "Reverts a previous commit"
              value: "revert"
            - name: "style"
              description: "Changes that do not affect the meaning of the code"
              value: "style"
            - name: "test"
              description: "Adding missing tests or correcting existing tests"
              value: "test"
        - type: "input"
          title: "Scope"
          key: "Scope"
          initialValue: ""
        - type: "menu"
          key: "Breaking"
          title: "Breaking change"
          options:
            - name: "no"
              value: ""
            - name: "yes"
              value: "!"
        - type: "input"
          title: "message"
          key: "Message"
          initialValue: ""
        - type: "confirm"
          key: "Confirm"
          title: "Commit"
          body: "Are you sure you want to commit?"
      command: "git commit --message \"{{.Form.Type}}{{ if .Form.Scope }}({{ .Form.Scope }}){{ end }}{{.Form.Breaking}}: {{.Form.Message}}\""
      loadingText: "Creating conventional commit..."
    - key: "<c-s>"
      command: "git update-index --skip-worktree {{.SelectedFile.Name}}"
      context: "files"
      description: "Skip worktree"
      loadingText: "Updating index for the selected files..."
    - key: "<c-S>"
        command: "git update-index --no-skip-worktree {{range .Form.Files}}{{.}} {{end}}"
        context: "files"
        description: "Show skipped worktree files and unskip selected"
        loadingText: "Updating index for the selected files..."
        prompts:
            - type: "menuFromCommand"
              title: "Skipped Worktree Files"
              key: "Files"
              command: "git ls-files -t | grep '^S' | sed 's/^S //'"
              filter: '^(?P<filename>.+)$'
              valueFormat: "{{ .filename }}"
              labelFormat: "{{ .filename | green }}"
              multi: true
